varChild <- var(galton$child)
varRed<-var(fir$residuals)
varRed<-var(fit$residuals)
varRes<-var(fit$residuals)
varEst <- var(ols.slope)
varEst <- var(est(ols.slope,ols.ic)
)
all.equal(varChild,varRed, varEst)
all.equal(varChild,varRes, varEst)
all.equal(varChild,varRes+ varEst)
efit <- lm(accel ~ mag+dist,attenu)
mean(residuals)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
data(mtcars)
summary(mtcars)
define (mtcars)
define(mtcars)
class(mtcars)
class(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
swirl()
library(swirl)
swirl
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(galton$child ~ galton$parent)
l_nor <- lm(gch_nor ~ gpa_nor)
swirl()
fit <- lm(galton$child ~ glaton$parent, galton)
fit <- lm(galton$child ~ glaton$parent, data=galton)
fit <- lm(galton$child ~ glaton$parent, galton)
fit <- lm(galton$child ~ galton$parent, galton)
fit <- lm(child ~ parent, galton)
sqrt(fit$residuals^2/n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes
sRes <- sum((child-lm)^2)
sRes <- sum((galton$child-lm)^2)
sRes <- sum((galton$child)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summaryfit$r
summary(fit)$r
summary(fit)$r.squared
cor(galton$chil, galton$parent)
cor(galton$chil, galton$parent)^2
cor(galton$parent, galton$child)^2
hist(mtcars$mgp)
x <- mtcars$mpg
hist(x)
hist(x, break = 10)
hist(x, breaks = 10)
boxplot(mpg~am, data = mtcars)
lm(mpg~am,data=mtcars)
fit <- lm(mpg~am,data=mtcars)
summary(fit)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
library(AppliedPredictiveModeling)
install.packages(Hmisc)
install.packages("Hmisc")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(taining$SuperPlasticizer)
hist(training$SuperPlasticizer)
head(training)
class(training$Superplasticizer)
tail(training)
hist(training$SuperPlasticizer)
hist
?hist
dim(training)
library(qqplot)
hist(log(training$Superplasticizer + 1))
hist(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("ElemStatLearn")
library(ElemStatLearn)
install.packages("pgmm")
library(pgmm)
library(rpart)
data(segmentationOriginal)
library(pgmm)
data(olive)
str(olive)
olive = olive[,-1]
model<-train(Area ~ ., data=olive, method="rpart")
model.b = rpart(Area ~ ., data=olive)
newdata.cart = as.data.frame(t(colMeans(olive)))
newdata = as.data.frame(t(colMeans(olive)))
predict(model.b, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
summary(modelSA)
predict.modelSA.test =  predict(modelSA, newdata=testSA)
table(predict.modelSA.test>0.5, testSA$chd)  # test set prediction
predict.modelSA.train =  predict(modelSA, newdata=trainSA)
table(predict.modelSA.test>0.5, trainSA$chd)  # training set prediction
sum(diag(table(predict.modelSA.test>0.5, testSA$chd)))/nrow(testSA) # test set Accuracy = 0.6883117
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predict.modelSA.test) # (1 - Accuracy) = 0.3116883 for testing set
missClass(trainSA$chd,predict.modelSA.train) # (1 - Accuracy) = 0.4761905 for training set
1 - missClass(testSA$chd,predict.modelSA.test) - sum(diag(table(predict.modelSA.test>0.5, testSA$chd)))/nrow(testSA)
# Question 5
# Load the vowel.train and vowel.test data sets:
# install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
str(vowel.test)
# Set the variable y to be a factor variable in both the training and test set. Then set the seed to 33833.
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables. Read about variable importance in random forests here: http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#ooberr The caret package uses by defualt the Gini importance. Calculate the variable importance using the varImp function in the caret package. What is the order of variable importance?
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
varImp(vowel.rfmodel)
install.packages("pgmm")
install.packages("gbm")
install.packages("lubridate")
install.packages("lubridate")
install.packages("forecast")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("e1071")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
prf <- predict(rf, vowel.test)
pgbm <- predict(gbm, vowel.test)
cmrf <- confusionMatrix(prf, vowel.test$y)
cmgbm <- confusionMatrix(pgbm, vowel.test$y)
cmrf$overall['Accuracy']
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(gbm)
library(mgcv)
library(nlme)
library(elasticnet)
install.packages("elasticnet")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(gbm)
library(mgcv)
library(nlme)
library(elasticnet)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
library(ggplot2)
library(rattle)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#Q1
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
suppressMessages(library(caret))
set.seed(33833)
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
rf.result <- predict(rfmodel, vowel.test)
gbm.result <- predict(gbmmodel, vowel.test)
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
confusionMatrix(vowel.test$y, gbm.result)$overall['Accuracy']
idx_agreed <- (rf.result == gbm.result)
confusionMatrix(vowel.test$y[idx_agreed], rf.result[idx_agreed])$overall['Accuracy']
install.packages("Shiny")
install.packages("shiny")
install.packages("shiny", dependencies = TRUE)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts", dependencies = TRUE)
library(UsingR)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
#Q4
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("devtools")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(shiny)
ftype(lm)
library(pryr)
install.packages("pryr")
library(pryr)
ftype(lm)
ftype(mean)
ftype(colSums)
ftype(dgamma)
lm
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
m
M
shiny::runApp('Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
shiny::runApp('Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
shiny::runApp('Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
shiny::runApp('Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
shiny::runApp('Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
shiny::runApp('Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(markdown))
suppressPackageStartupMessages(library(ISLR))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(zoo))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(zoo))
suppressPackageStartupMessages(library(reshape))
suppressPackageStartupMessages(library(datasets))
## Prepare data to be displayed
## Load presidential election data by state from 1932 - 2012
library(RCurl)
#setwd("/Users/ggarg/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/")
# prepare a dataset by states
State <- as.matrix(state.abb)
#State <- cbind(State,0)
#read HIMSS Analytics data for New Active buyers
try(df.HIMSS.NewActive <- read_excel("_ Orgs _By Tech_.xlsx"))
#repeat value of Technology.id from row 1 to all the cells.
df.HIMSS.NewActive$'Technology' <- na.locf(df.HIMSS.NewActive$'Technology')
#repeat hospital system
df.HIMSS.NewActive$'Health System' <- na.locf(df.HIMSS.NewActive$'Health System')
#repeat hospital name
df.HIMSS.NewActive$Organization <- na.locf(df.HIMSS.NewActive$Organization)
#repeat technology purchase plan
df.HIMSS.NewActive$'Technology Purchase Plan' <- na.locf(df.HIMSS.NewActive$'Technology Purchase Plan')
# #read HIMSS Analytics data for planned replacements
# df.HIMSS.ActiveReplace <- read_excel("_ Orgs _By Tech 2_.xlsx")
# #repeat value of Technology.id from row 1 to all the cells.
# df.HIMSS.ActiveReplace$'Technology Id' <- na.locf(df.HIMSS.ActiveReplace$'Technology Id')
# #repeat hospital name
# df.HIMSS.ActiveReplace$Organization <- na.locf(df.HIMSS.ActiveReplace$Organization)
# #repeat technology repeat plan
# df.HIMSS.ActiveReplace$'Technology Purchase Plan'<- na.locf(df.HIMSS.ActiveReplace$'Technology Purchase Plan')
#read Novation member list
#try (
df.Novation <- read_excel("HIMSS_Matched_Data-Current.xlsx")
#)
#read HIMSS Analytics data for members who DO NOT have the technology installed
# Filters assumed:
# -250 beds,
# States: AK, LO,OK, TX
# Type: Hospital, Sub-Acute, Practice, Health System (Single), Health System (Multi)
#
try(df.HIMSS.NoInstall <- read_excel("_ of Purchasing Organization.xlsx"))
# GPO based downloads are grouped by the Health System name
#repeat value of Health System ID
df.HIMSS.NoInstall$`HS Unique ID` <- na.locf(df.HIMSS.NoInstall$`HS Unique ID`)
#repeat value of Health System
df.HIMSS.NoInstall$`Health System` <- na.locf(df.HIMSS.NoInstall$`Health System`)
#repeat Org Unique Id
df.HIMSS.NoInstall$`Org Unique Id` <- na.locf(df.HIMSS.NoInstall$`Org Unique Id`)
#repeat Organization
df.HIMSS.NoInstall$`Organization` <- na.locf(df.HIMSS.NoInstall$`Organization`)
#repeat State
df.HIMSS.NoInstall$`State/Province` <- na.locf(df.HIMSS.NoInstall$`State/Province`)
#repeat Organization Type
df.HIMSS.NoInstall$`Organization Type` <- na.locf(df.HIMSS.NoInstall$`Organization Type`)
# #Lets find the matching records from New Buyers in the Novation member list
# df.New <- intersect(df.HIMSS.NewActive$Organization,df.Novation$NAME)
# df.target.New<-df.Novation[df.Novation$NAME %in% df.New,]
#
# #Lets find the matching records from Replacement Buyers in the Novation member list
# df.Replace <- intersect(df.HIMSS.ActiveReplace$Organization,df.Novation$NAME)
# df.target.Replace<-df.Novation[df.Novation$NAME %in% df.Replace,]
# #df.HIMSS.ActiveReplace[df.HIMSS.ActiveReplace$Organization %in% df.Replace,]
#Lets find the matching records from NoInstall list in the Novation member list
df.NoInstall <- intersect(df.HIMSS.NoInstall$'HS Unique Id',df.Novation$'HA UniqueId')
df.target.NoInstall <- df.Novation[df.Novation$'HA UniqueId' %in% df.NoInstall,]
setwd("/Users/ggarg/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO")
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(markdown))
suppressPackageStartupMessages(library(ISLR))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(zoo))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(zoo))
suppressPackageStartupMessages(library(reshape))
suppressPackageStartupMessages(library(datasets))
## Prepare data to be displayed
## Load presidential election data by state from 1932 - 2012
library(RCurl)
#setwd("/Users/ggarg/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/")
# prepare a dataset by states
State <- as.matrix(state.abb)
#State <- cbind(State,0)
#read HIMSS Analytics data for New Active buyers
try(df.HIMSS.NewActive <- read_excel("_ Orgs _By Tech_.xlsx"))
#repeat value of Technology.id from row 1 to all the cells.
df.HIMSS.NewActive$'Technology' <- na.locf(df.HIMSS.NewActive$'Technology')
#repeat hospital system
df.HIMSS.NewActive$'Health System' <- na.locf(df.HIMSS.NewActive$'Health System')
#repeat hospital name
df.HIMSS.NewActive$Organization <- na.locf(df.HIMSS.NewActive$Organization)
#repeat technology purchase plan
df.HIMSS.NewActive$'Technology Purchase Plan' <- na.locf(df.HIMSS.NewActive$'Technology Purchase Plan')
# #read HIMSS Analytics data for planned replacements
# df.HIMSS.ActiveReplace <- read_excel("_ Orgs _By Tech 2_.xlsx")
# #repeat value of Technology.id from row 1 to all the cells.
# df.HIMSS.ActiveReplace$'Technology Id' <- na.locf(df.HIMSS.ActiveReplace$'Technology Id')
# #repeat hospital name
# df.HIMSS.ActiveReplace$Organization <- na.locf(df.HIMSS.ActiveReplace$Organization)
# #repeat technology repeat plan
# df.HIMSS.ActiveReplace$'Technology Purchase Plan'<- na.locf(df.HIMSS.ActiveReplace$'Technology Purchase Plan')
#read Novation member list
#try (
df.Novation <- read_excel("HIMSS_Matched_Data-Current.xlsx")
#)
#read HIMSS Analytics data for members who DO NOT have the technology installed
# Filters assumed:
# -250 beds,
# States: AK, LO,OK, TX
# Type: Hospital, Sub-Acute, Practice, Health System (Single), Health System (Multi)
#
try(df.HIMSS.NoInstall <- read_excel("_ of Purchasing Organization.xlsx"))
# GPO based downloads are grouped by the Health System name
#repeat value of Health System ID
df.HIMSS.NoInstall$`HS Unique ID` <- na.locf(df.HIMSS.NoInstall$`HS Unique ID`)
#repeat value of Health System
df.HIMSS.NoInstall$`Health System` <- na.locf(df.HIMSS.NoInstall$`Health System`)
#repeat Org Unique Id
df.HIMSS.NoInstall$`Org Unique Id` <- na.locf(df.HIMSS.NoInstall$`Org Unique Id`)
#repeat Organization
df.HIMSS.NoInstall$`Organization` <- na.locf(df.HIMSS.NoInstall$`Organization`)
#repeat State
df.HIMSS.NoInstall$`State/Province` <- na.locf(df.HIMSS.NoInstall$`State/Province`)
#repeat Organization Type
df.HIMSS.NoInstall$`Organization Type` <- na.locf(df.HIMSS.NoInstall$`Organization Type`)
# #Lets find the matching records from New Buyers in the Novation member list
# df.New <- intersect(df.HIMSS.NewActive$Organization,df.Novation$NAME)
# df.target.New<-df.Novation[df.Novation$NAME %in% df.New,]
#
# #Lets find the matching records from Replacement Buyers in the Novation member list
# df.Replace <- intersect(df.HIMSS.ActiveReplace$Organization,df.Novation$NAME)
# df.target.Replace<-df.Novation[df.Novation$NAME %in% df.Replace,]
# #df.HIMSS.ActiveReplace[df.HIMSS.ActiveReplace$Organization %in% df.Replace,]
#Lets find the matching records from NoInstall list in the Novation member list
df.NoInstall <- intersect(df.HIMSS.NoInstall$'HS Unique Id',df.Novation$'HA UniqueId')
df.target.NoInstall <- df.Novation[df.Novation$'HA UniqueId' %in% df.NoInstall,]
View(df.target.NoInstall)
df.NoInstall <- intersect(df.HIMSS.NoInstall$'HS Unique Id',df.Novation$'HA UniqueId')
intersect(df.HIMSS.NoInstall$'HS Unique Id',df.Novation$'HA UniqueId')
df.Novation[df.HIMSS.NoInstall$`HS Unique ID` %in% df.Novation$`HA UniqueId`, ]
df.target.NoInstall <- df.Novation[df.HIMSS.NoInstall$`HS Unique ID` %in% df.Novation$`HA UniqueId`, ]
View(df.target.NoInstall)
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
intersect(x, y)
df.HIMSS.NoInstall$`HS Unique ID`
df.Novation$`HA UniqueId`
intersect(df.HIMSS.NoInstall$`HS Unique ID`,df.Novation$`HA UniqueId`)
df.NoInstall <- intersect(df.HIMSS.NoInstall$`HS Unique ID`,df.Novation$`HA UniqueId`)
df.target.NoInstall <- df.Novation[df.Novation$`HA UniqueId` %in% df.NoInstall, ]
View(df.target.NoInstall)
xtabs(formula = df.target.NoInstall$STATE ~., data = df.target.NoInstall)
xtabs(STATE ~., data = df.target.NoInstall)
xtabs(STATE ~ nrows(), data = df.target.NoInstall)
xtabs(STATE ~ nrow(), data = df.target.NoInstall)
xtabs( ~ df.HIMSS.NoInstall$`State/Province`, data = df.target.NoInstall)
shiny::runApp('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
shiny::runApp('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
shiny::runApp('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data')
xtabs( ~ df.HIMSS.NoInstall$`State/Province`, data = df.target.NoInstall)
xtabs( df.HIMSS.NoInstall$`State/Province`~., data = df.target.NoInstall)
xtabs( df.HIMSS.NoInstall$`State/Province`~., data = df.target.NoInstall)
xtabs( df.HIMSS.NoInstall$`State/Province` ~ ., data = df.target.NoInstall)
xtabs( ~ df.HIMSS.NoInstall$`State/Province`, data = df.target.NoInstall)
as.matrix(xtabs( ~ df.HIMSS.NoInstall$`State/Province`, data = df.target.NoInstall))
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
setwd("/Users/ggarg/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/")
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
setwd("/Users/ggarg/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO/")
#read HIMSS Analytics data for members who DO NOT have the technology installed
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
df.Novation <- read_excel("HIMSS_Matched_Data-Current.xlsx")
#read HIMSS Analytics data for New Active buyers
df.HIMSS.ActiveBuyers <- read_excel("_ Orgs _By Tech_.xlsx")
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
source('~/Documents/2015/Calance/Marketing/Healthcare Solutions/Security/Data/SSO_HIMSS_Analytics.R')
